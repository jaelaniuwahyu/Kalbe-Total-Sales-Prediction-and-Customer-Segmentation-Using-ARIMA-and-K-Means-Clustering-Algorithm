# -*- coding: utf-8 -*-
"""Kalbe Nutritional - Data Scientist - PBI - Final Project 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1avqbcqsOpBFCjaKVOOuqAyZH_6SpY-2e

# Customer Segmentation Using K-Means Clustering Algorithm
Author: Jaelani (Jay)

**Content:**
1.   Introduction
2.   Importing Libraries
3.   Dataset Overview
4.   Model Machine Learning

# 1. Introduction

**Dataset Informastion**
*   Dataset ini terdiri dari 4 csv file yaitu customer, store, product dan transaction.
*   Merupakan dummy data untuk studi kasus FMCG dalam kurun waktu 1 tahun yang diambil melalui program membership.

**Attribute Information**
*   Customer
 - `CustomerID`: No Unik Customer
 - `Age`: Usia Customer
 - `Gender`: 0 Wanita, 1 Pria
 - `Marital Status`: Married, Single (Blm menikah/Pernah menikah)
 - `Income` : Pendapatan per bulan dalam jutaan rupiah

*   Store
 - `StoreID`: Kode Unik Store
 - `StoreName`: Nama Toko
 - `GroupStore`: Nama group
 - `Type`: Modern Trade, General Trade
 - `Latitude`: Kode Latitude
 - `Longitude`: Kode Longitude

*   Product
 - `ProductID`: Kode Unik Product
 - `Product Name`: Nama Product
 - `Price`: Harga dlm rupiah

*   Transaction
 - `TransactionID`: Kode Unik Transaksi
 - `Date`: Tanggal transaksi
 - `Qty`: Jumlah item yang dibeli
 - `Total Amount`: Price x Qty

**Company Goals**
*   Kamu adalah seorang Data Scientist di Kalbe Nutritionals dan sedang mendapatkan project baru dari tim marketing.
*   Dari tim marketing, kamu diminta untuk dapat membuat cluster/segment customer berdasarkan beberapa kriteria.

**Objectives**
*   Untuk membuat segment customer.
*   Segment Customer ini nantinya akan digunakan oleh tim marketing untuk memberikan personalized promotion dan sales treatment.

# 2. Importing Libraries
"""

# Basic
import pandas as pd
import numpy as np

# Data Viz
import matplotlib.pyplot as plt
import seaborn as sns

# Library untuk machine learning model
from sklearn import preprocessing
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from yellowbrick.cluster import KElbowVisualizer
from sklearn.preprocessing import MinMaxScaler, StandardScaler

import warnings
warnings.filterwarnings('ignore')

"""# 3. Dataset Overview

## 3.1. Reading Dataset
"""

df = pd.read_csv("/content/drive/MyDrive/Datasets/Dataset Kalbe Nutritional - Data Scientist - PBI - Final Project/Merged_Data.csv")
df

df.head()

"""## 3.2. Data Shape"""

df.shape

"""## 3.3. Data Correlation Using Heatmap"""

df.corr()

plt.figure(figsize=(10,10))
ax=sns.heatmap(df.corr(),cmap="coolwarm",annot=True,linewidth=2)

"""## 3.4. Data Aggregation (Data Clustering)

Membuat data baru untuk clustering, yaitu groupby by customerID lalu yang di aggregasi adalah :
*   Transaction id count
*   Qty sum
*   Total amount sum
"""

df = df.groupby(['CustomerID']).agg({'TransactionID' : 'count','Qty' : 'sum','TotalAmount' : 'sum'}).reset_index()

df.head()

"""# 4. Model MAchine Learning (K-Means Clustering)

## 4.1. Standarize and Normalize Data
"""

#Standarisasi dataset
X = df.values
X_std = StandardScaler().fit_transform(X)
df_std = pd.DataFrame(data=X_std,columns=df.columns)
df_std.isna().sum()

#Normalisasi dataset dengan minmaxscaler
X_norm = MinMaxScaler().fit_transform(X)
X_norm

# Normalisasi dataset dengan preprocessing sklearn
X_norm2 = preprocessing.normalize(df)
X_norm2

X_std

df_std

df.drop("CustomerID", axis=1)

"""## 4.2. Elbow Curve Method"""

wcss= []
for n in range (1,11):
    model1 = KMeans(n_clusters=n, init='k-means++', n_init = 10, max_iter=100, tol =0.0001, random_state = 100)
    model1.fit(X_std)
    wcss.append(model1.inertia_)
print(wcss)

plt.figure(figsize=(8,5))
plt.plot(list(range(1,11)), wcss, color = 'b', marker = 'o', linewidth=2, markersize=12, markerfacecolor= 'y',
         markeredgecolor= 'r')
plt.title('WCSS vs Number of Cluster', fontsize = 15)
plt.xlabel('Number of Cluster')
plt.ylabel('WCSS')
plt.xticks(list(range(1,11)))
plt.show()

"""## 4.3. Sillhouette Method"""

# Silhouette Analysis
range_n_clusters = [2, 3, 4, 5, 6, 7, 8]
for num_clusters in range_n_clusters:

    # Initialise kmeans
    kmeans = KMeans(n_clusters=num_clusters, max_iter=500)
    kmeans.fit(df)
    cluster_labels = kmeans.labels_

    # Silhouette Score
    silhouette_avg = silhouette_score(df, cluster_labels)
    print("For n_clusters={0}, the silhouette score is {1}".format(num_clusters, silhouette_avg))

"""## 4.4. Clustered Data"""

kmeans_3 = KMeans(n_clusters=3,init='k-means++',max_iter=300,n_init=10,random_state=100)
kmeans_3.fit(X_std)

df['cluster'] = kmeans_3.labels_
df.head()

plt.figure(figsize=(6,6))
sns.pairplot(data=df,hue='cluster',palette='Set2')
plt.show()

df['CustomerID'] = df['CustomerID']
df_cluster_mean = df.groupby('cluster').agg({'CustomerID':'count','TransactionID':'mean','Qty':'mean','TotalAmount':'mean'})
df_cluster_mean.sort_values('CustomerID', ascending = False)

import matplotlib.colors as mcolors

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
x = np.array(df['TransactionID'])
y = np.array(df['Qty'])
z = np.array(df['TotalAmount'])

cmap = mcolors.LinearSegmentedColormap.from_list("", ["#F28E2B", "#59A14F", "#4E79A7"])
ax.scatter(x, y, z, c=df['cluster'], cmap=cmap)

plt.show()